import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import os
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø–µ–∫—Ç—Ä–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø–µ–∫—Ç—Ä–æ–≤ –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ Excel —Ñ–∞–π–ª–∞
def load_emitters_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–ª—É—á–∞—Ç–µ–ª—è—Ö –∏–∑ Excel-—Ñ–∞–π–ª–∞ (ODS/XLS/XLSX)

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª—É
    possible_paths = [
        os.path.join("data", "light_sources", "light_sources.ods"),  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        os.path.join(script_dir, "data", "light_sources", "light_sources.ods"),  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞
        os.path.join(script_dir, "..", "data", "light_sources", "light_sources.ods"),  # –û–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö
        os.path.join(os.getcwd(), "data", "light_sources", "light_sources.ods"),  # –Ø–≤–Ω–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        os.path.join("data", "light_sources", "Light_sources.xlsx"),
        os.path.join("data", "light_sources", "Light_sources.xls"),
        os.path.join(script_dir, "data", "light_sources", "Light_sources.xlsx"),
        os.path.join(script_dir, "data", "light_sources", "Light_sources.xls"),
    ]

    # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º
    uploaded_file = st.sidebar.file_uploader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π",
                                             type=["ods", "xlsx", "xls"])

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π
    emitters = {}
    file_path_used = None
    error_messages = []

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if uploaded_file is not None:
        try:
            # –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º pandas
            df_dict = pd.read_excel(uploaded_file, sheet_name=None)
            file_path_used = "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            st.sidebar.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
            for sheet_name, df in df_dict.items():
                emitters.update(process_dataframe(sheet_name, df))

        except Exception as e:
            error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")

    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏ –µ–≥–æ —á—Ç–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –ø—É—Ç–∏
    if not emitters:
        for path in possible_paths:
            try:
                if os.path.exists(path):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    df_dict = pd.read_excel(path, sheet_name=None)
                    file_path_used = path

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
                    for sheet_name, df in df_dict.items():
                        emitters.update(process_dataframe(sheet_name, df))

                    break
            except Exception as e:
                error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {str(e)}")

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    if emitters:
        st.sidebar.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {file_path_used}")
        return emitters

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    error_details = "\n".join(error_messages)
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
        st.code(error_details)
        st.markdown("**–¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥:** " + os.getcwd())
        st.markdown("**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:**")
        st.markdown("""
        1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (`.ods`, `.xlsx` –∏–ª–∏ `.xls`)
        2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ `data/light_sources/light_sources.ods`
        3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel: `pip install pandas openpyxl odfpy`
        """)

    return {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
def process_dataframe(sheet_name, df):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ø–µ–∫—Ç—Ä–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã

    Args:
        sheet_name (str): –ò–º—è –ª–∏—Å—Ç–∞/—Å–ø–µ–∫—Ç—Ä–∞
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    emitters = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    wavelength_col = None
    intensity_col = None

    for col in df.columns:
        col_lower = str(col).lower()
        if 'wavelength' in col_lower or '–¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã' in col_lower or '–Ω–º' in col_lower or 'nm' in col_lower:
            wavelength_col = col
        if 'intensity' in col_lower or '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å' in col_lower or 'relative' in col_lower:
            intensity_col = col

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    if wavelength_col is not None and intensity_col is not None:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è NaN –∑–Ω–∞—á–µ–Ω–∏—è
        wavelengths = []
        intensities = []

        for _, row in df.iterrows():
            try:
                wavelength = float(row[wavelength_col])
                intensity = float(row[intensity_col])
                if not (np.isnan(wavelength) or np.isnan(intensity)):
                    wavelengths.append(wavelength)
                    intensities.append(intensity)
            except (ValueError, TypeError):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                pass

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        if wavelengths and intensities:
            emitters[sheet_name] = {
                'wavelengths': wavelengths,
                'intensities': intensities
            }

    return emitters

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
def create_filter_spectrum(center, width, min_wavelength=350, max_wavelength=800, step=1):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –ø–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞

    Args:
        center (float): –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–º)
        width (float): –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è FWHM (–Ω–º)
        min_wavelength (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)
        max_wavelength (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)
        step (float): –®–∞–≥ –ø–æ –¥–ª–∏–Ω–µ –≤–æ–ª–Ω—ã (–Ω–º)

    Returns:
        pd.DataFrame: DataFrame —Å –¥–ª–∏–Ω–∞–º–∏ –≤–æ–ª–Ω –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
    """
    wavelengths = np.arange(min_wavelength, max_wavelength, step)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—É–ø–µ—Ä–≥–∞—É—Å—Å–∞
    # –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∑–∫–∏—Ö –∫—Ä–∞–µ–≤ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
    n = 10  # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä—É—Ç–∏–∑–Ω—É —Å–∫–ª–æ–Ω–æ–≤)
    transmission = np.exp(-0.5 * ((wavelengths - center) / (width/2))**(2*n))

    return pd.DataFrame({
        'wavelength': wavelengths,
        'transmission': transmission
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
def calculate_resulting_spectrum(emitter_data, filter_dfs):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–µ–∫—Ç—Ä –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏–∑–ª—É—á–∞—Ç–µ–ª—é.

    Args:
        emitter_data (dict): –î–∞–Ω–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–∞ –∏–∑–ª—É—á–∞—Ç–µ–ª—è
        filter_dfs (list): –°–ø–∏—Å–æ–∫ DataFrame'–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤

    Returns:
        pd.DataFrame: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º
    """
    if not emitter_data or len(filter_dfs) == 0:
        return None

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∏–∑–ª—É—á–∞—Ç–µ–ª—è
    emitter_df = pd.DataFrame({
        'wavelength': emitter_data['wavelengths'],
        'intensity': emitter_data['intensities']
    })

    result = emitter_df.copy()
    result['resulting_intensity'] = result['intensity']

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
    for filter_df in filter_dfs:
        if filter_df is not None:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —Å–µ—Ç–∫—É –¥–ª–∏–Ω –≤–æ–ª–Ω –∏–∑–ª—É—á–∞—Ç–µ–ª—è
            interp_transmission = np.interp(
                result['wavelength'],
                filter_df['wavelength'],
                filter_df['transmission'],
                left=0, right=0
            )
            # –£–º–Ω–æ–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
            result['resulting_intensity'] *= interp_transmission

    return result

# –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π
emitters_data = load_emitters_data()
emitter_names = list(emitters_data.keys())

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
if not emitter_names:
    st.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_wavelengths = np.arange(350, 800, 1)

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –¥–µ–º–æ-–∏–∑–ª—É—á–∞—Ç–µ–ª—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–µ–∫—Ç—Ä–∞–º–∏
    demo_green = np.exp(-((demo_wavelengths - 550)**2) / (2 * 30**2))
    demo_blue = np.exp(-((demo_wavelengths - 470)**2) / (2 * 25**2))

    emitters_data = {
        "–î–µ–º–æ: –ó–µ–ª–µ–Ω—ã–π (550–Ω–º)": {
            'wavelengths': demo_wavelengths.tolist(),
            'intensities': demo_green.tolist()
        },
        "–î–µ–º–æ: –°–∏–Ω–∏–π (470–Ω–º)": {
            'wavelengths': demo_wavelengths.tolist(),
            'intensities': demo_blue.tolist()
        }
    }
    emitter_names = list(emitters_data.keys())

# –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    # –í—ã–±–æ—Ä –∏–∑–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    selected_emitter = st.selectbox("–ò–∑–ª—É—á–∞—Ç–µ–ª—å", emitter_names)

    # –°–µ–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    num_filters = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤", min_value=1, max_value=10, value=1)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filter_params = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    for i in range(num_filters):
        st.markdown(f"**–§–∏–ª—å—Ç—Ä {i+1}**")
        filter_center = st.number_input(f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)",
                                        min_value=350.0, max_value=800.0,
                                        value=550.0, key=f"center_{i}")
        filter_width = st.number_input(f"–®–∏—Ä–∏–Ω–∞ FWHM (–Ω–º)",
                                       min_value=1.0, max_value=200.0,
                                       value=40.0, key=f"width_{i}")
        filter_params.append({
            'center': filter_center,
            'width': filter_width
        })

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–ª—É—á–∞—Ç–µ–ª—è
selected_emitter_data = emitters_data.get(selected_emitter)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ–∫—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
filter_spectra = []
for params in filter_params:
    filter_spectrum = create_filter_spectrum(params['center'], params['width'])
    filter_spectra.append(filter_spectrum)

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–µ–∫—Ç—Ä
resulting_spectrum = calculate_resulting_spectrum(selected_emitter_data, filter_spectra)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
col1, col2 = st.columns(2)

# –ì—Ä–∞—Ñ–∏–∫ —Å–ø–µ–∫—Ç—Ä–∞ –∏–∑–ª—É—á–∞—Ç–µ–ª—è
with col1:
    st.subheader(f"–°–ø–µ–∫—Ç—Ä –∏–∑–ª—É—á–∞—Ç–µ–ª—è: {selected_emitter}")
    if selected_emitter_data:
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=selected_emitter_data['wavelengths'],
            y=selected_emitter_data['intensities'],
            mode='lines',
            name='–ò–∑–ª—É—á–∞—Ç–µ–ª—å'
        ))
        fig.update_layout(
            xaxis_title='–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)',
            yaxis_title='–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
            height=400
        )
        st.plotly_chart(fig, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ —Å–ø–µ–∫—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
with col2:
    st.subheader("–°–ø–µ–∫—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    if filter_spectra:
        fig = go.Figure()
        for i, filter_spectrum in enumerate(filter_spectra):
            params = filter_params[i]
            fig.add_trace(go.Scatter(
                x=filter_spectrum['wavelength'],
                y=filter_spectrum['transmission'],
                mode='lines',
                name=f'–§–∏–ª—å—Ç—Ä {i+1} ({params["center"]} –Ω–º, {params["width"]} –Ω–º)'
            ))
        fig.update_layout(
            xaxis_title='–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)',
            yaxis_title='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è',
            height=400
        )
        st.plotly_chart(fig, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
st.subheader("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–µ–∫—Ç—Ä")
if resulting_spectrum is not None:
    fig = go.Figure()
    # –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –∏–∑–ª—É—á–∞—Ç–µ–ª—è (—Å –Ω–∏–∑–∫–æ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
    fig.add_trace(go.Scatter(
        x=resulting_spectrum['wavelength'],
        y=resulting_spectrum['intensity'],
        mode='lines',
        name='–ò—Å—Ö–æ–¥–Ω—ã–π',
        line=dict(color='gray', width=1, dash='dash'),
        opacity=0.5
    ))
    # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–µ–∫—Ç—Ä
    fig.add_trace(go.Scatter(
        x=resulting_spectrum['wavelength'],
        y=resulting_spectrum['resulting_intensity'],
        mode='lines',
        name='–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π',
        line=dict(color='blue', width=2),
    ))
    fig.update_layout(
        xaxis_title='–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)',
        yaxis_title='–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
if resulting_spectrum is not None:
    with st.expander("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞"):
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—É—é –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã
        peak_idx = resulting_spectrum['resulting_intensity'].idxmax()
        peak_wavelength = resulting_spectrum.loc[peak_idx, 'wavelength']
        peak_intensity = resulting_spectrum.loc[peak_idx, 'resulting_intensity']

        # –í—ã—á–∏—Å–ª—è–µ–º FWHM (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –º–∞–∫—Å–∏–º—É–º–∞)
        half_max = peak_intensity / 2
        above_half_max = resulting_spectrum[resulting_spectrum['resulting_intensity'] >= half_max]
        if not above_half_max.empty and len(above_half_max) > 1:
            min_wl = above_half_max['wavelength'].min()
            max_wl = above_half_max['wavelength'].max()
            fwhm = max_wl - min_wl
        else:
            fwhm = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        integral_intensity = np.trapz(
            resulting_spectrum['resulting_intensity'],
            resulting_spectrum['wavelength']
        )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü–∏–∫–æ–≤–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã", f"{peak_wavelength:.1f} –Ω–º")
        with col2:
            st.metric("FWHM", f"{fwhm if isinstance(fwhm, str) else fwhm:.1f} –Ω–º")
        with col3:
            # –ù–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–π
            original_integral = np.trapz(
                resulting_spectrum['intensity'],
                resulting_spectrum['wavelength']
            )
            relative_intensity = (integral_intensity / original_integral) * 100
            st.metric("–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", f"{relative_intensity:.1f}%")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"):
    st.markdown("""
    ### –û –ø—Ä–æ–µ–∫—Ç–µ
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ–∫—Ç—Ä—ã –∏–∑–ª—É—á–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.

    **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:**
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞ –∏–∑–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    - –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    - –†–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
    - –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞

    **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:**
    ```
    web_apps/
    ‚îú‚îÄ‚îÄ venv/
    ‚îú‚îÄ‚îÄ data/
    ‚îÇ   ‚îî‚îÄ‚îÄ light_sources/
    ‚îÇ       ‚îî‚îÄ‚îÄ light_sources.ods
    ‚îî‚îÄ‚îÄ main.py
    ```
    """)